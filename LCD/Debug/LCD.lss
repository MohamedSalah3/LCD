
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000005ec  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2f  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040a  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000500  00000000  00000000  00001df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000265  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f3  00000000  00000000  00002759  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  8a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	
  92:	fc 01       	movw	r30, r24
	uint8_t RET=0;
	if (DIO_info== NULL)
  94:	00 97       	sbiw	r24, 0x00	; 0
  96:	09 f4       	brne	.+2      	; 0x9a <DIO_init+0x8>
  98:	50 c0       	rjmp	.+160    	; 0x13a <DIO_init+0xa8>
	{
		RET=NULL_PTR+DIO_MODULE;
		
	}else{
		switch(DIO_info->dir)
  9a:	82 81       	ldd	r24, Z+2	; 0x02
  9c:	88 23       	and	r24, r24
  9e:	21 f0       	breq	.+8      	; 0xa8 <DIO_init+0x16>
  a0:	8f 3f       	cpi	r24, 0xFF	; 255
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_init+0x14>
  a4:	4c c0       	rjmp	.+152    	; 0x13e <DIO_init+0xac>
  a6:	27 c0       	rjmp	.+78     	; 0xf6 <DIO_init+0x64>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
  a8:	80 81       	ld	r24, Z
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	79 f0       	breq	.+30     	; 0xcc <DIO_init+0x3a>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	30 f0       	brcs	.+12     	; 0xbe <DIO_init+0x2c>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	91 f0       	breq	.+36     	; 0xda <DIO_init+0x48>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_init+0x2a>
  ba:	43 c0       	rjmp	.+134    	; 0x142 <DIO_init+0xb0>
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <DIO_init+0x56>
		 		{
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
  be:	9a b3       	in	r25, 0x1a	; 26
  c0:	81 81       	ldd	r24, Z+1	; 0x01
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  c8:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
					break;
  ca:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
  cc:	97 b3       	in	r25, 0x17	; 23
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  d6:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
  d8:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
  da:	94 b3       	in	r25, 0x14	; 20
  dc:	81 81       	ldd	r24, Z+1	; 0x01
  de:	80 95       	com	r24
  e0:	89 23       	and	r24, r25
  e2:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  e4:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
  e6:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
  e8:	91 b3       	in	r25, 0x11	; 17
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	80 95       	com	r24
  ee:	89 23       	and	r24, r25
  f0:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
  f2:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
  f4:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
  f6:	80 81       	ld	r24, Z
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	69 f0       	breq	.+26     	; 0x116 <DIO_init+0x84>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_init+0x78>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	79 f0       	breq	.+30     	; 0x122 <DIO_init+0x90>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	f9 f4       	brne	.+62     	; 0x146 <DIO_init+0xb4>
 108:	12 c0       	rjmp	.+36     	; 0x12e <DIO_init+0x9c>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
 10a:	9a b3       	in	r25, 0x1a	; 26
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	89 2b       	or	r24, r25
 110:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 112:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
 114:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
 116:	97 b3       	in	r25, 0x17	; 23
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	89 2b       	or	r24, r25
 11c:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 11e:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
 120:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
 122:	94 b3       	in	r25, 0x14	; 20
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	89 2b       	or	r24, r25
 128:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 12a:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
 12c:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
 12e:	91 b3       	in	r25, 0x11	; 17
 130:	81 81       	ldd	r24, Z+1	; 0x01
 132:	89 2b       	or	r24, r25
 134:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 136:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
 138:	08 95       	ret
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	
	uint8_t RET=0;
	if (DIO_info== NULL)
	{
		RET=NULL_PTR+DIO_MODULE;
 13a:	86 e1       	ldi	r24, 0x16	; 22
 13c:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
			RET=E_NOK;
	}
	
}	
return RET;
}
 148:	08 95       	ret

0000014a <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
 14a:	44 23       	and	r20, r20
 14c:	21 f0       	breq	.+8      	; 0x156 <DIO_Write+0xc>
 14e:	4f 3f       	cpi	r20, 0xFF	; 255
 150:	09 f0       	breq	.+2      	; 0x154 <DIO_Write+0xa>
 152:	3f c0       	rjmp	.+126    	; 0x1d2 <DIO_Write+0x88>
 154:	21 c0       	rjmp	.+66     	; 0x198 <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	69 f0       	breq	.+26     	; 0x174 <DIO_Write+0x2a>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_Write+0x1e>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	79 f0       	breq	.+30     	; 0x180 <DIO_Write+0x36>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	c1 f5       	brne	.+112    	; 0x1d6 <DIO_Write+0x8c>
 166:	12 c0       	rjmp	.+36     	; 0x18c <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	60 95       	com	r22
 16c:	68 23       	and	r22, r24
 16e:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 170:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
 172:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
 174:	88 b3       	in	r24, 0x18	; 24
 176:	60 95       	com	r22
 178:	68 23       	and	r22, r24
 17a:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
 17e:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
 180:	85 b3       	in	r24, 0x15	; 21
 182:	60 95       	com	r22
 184:	68 23       	and	r22, r24
 186:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 188:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
 18a:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	60 95       	com	r22
 190:	68 23       	and	r22, r24
 192:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 194:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
 196:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	61 f0       	breq	.+24     	; 0x1b4 <DIO_Write+0x6a>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	28 f0       	brcs	.+10     	; 0x1aa <DIO_Write+0x60>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	69 f0       	breq	.+26     	; 0x1be <DIO_Write+0x74>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	c9 f4       	brne	.+50     	; 0x1da <DIO_Write+0x90>
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	68 2b       	or	r22, r24
 1ae:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
 1b2:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
 1b4:	88 b3       	in	r24, 0x18	; 24
 1b6:	68 2b       	or	r22, r24
 1b8:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
 1bc:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	68 2b       	or	r22, r24
 1c2:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
 1c6:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
 1c8:	82 b3       	in	r24, 0x12	; 18
 1ca:	68 2b       	or	r22, r24
 1cc:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
 1d0:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1da:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
 1dc:	08 95       	ret

000001de <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
 1de:	fa 01       	movw	r30, r20

switch (GPIO)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	59 f0       	breq	.+22     	; 0x1fa <DIO_Read+0x1c>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_Read+0x14>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	59 f0       	breq	.+22     	; 0x202 <DIO_Read+0x24>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	81 f4       	brne	.+32     	; 0x210 <DIO_Read+0x32>
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
 1f2:	89 b3       	in	r24, 0x19	; 25
 1f4:	68 23       	and	r22, r24
 1f6:	60 83       	st	Z, r22
	break;
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
 1fa:	86 b3       	in	r24, 0x16	; 22
 1fc:	68 23       	and	r22, r24
 1fe:	60 83       	st	Z, r22
	break;
 200:	07 c0       	rjmp	.+14     	; 0x210 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
 202:	83 b3       	in	r24, 0x13	; 19
 204:	68 23       	and	r22, r24
 206:	60 83       	st	Z, r22
	break;
 208:	03 c0       	rjmp	.+6      	; 0x210 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
 20a:	80 b3       	in	r24, 0x10	; 16
 20c:	68 23       	and	r22, r24
 20e:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	11 f0       	breq	.+4      	; 0x21a <DIO_Read+0x3c>
{
	*data = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
}


}
 21a:	08 95       	ret

0000021c <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	61 f0       	breq	.+24     	; 0x238 <DIO_Toggle+0x1c>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	28 f0       	brcs	.+10     	; 0x22e <DIO_Toggle+0x12>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	69 f0       	breq	.+26     	; 0x242 <DIO_Toggle+0x26>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	a9 f4       	brne	.+42     	; 0x256 <DIO_Toggle+0x3a>
 22c:	0f c0       	rjmp	.+30     	; 0x24c <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	68 27       	eor	r22, r24
 232:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
		break;
 236:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	68 27       	eor	r22, r24
 23c:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 240:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
 242:	85 b3       	in	r24, 0x15	; 21
 244:	68 27       	eor	r22, r24
 246:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
		break;
 24a:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	68 27       	eor	r22, r24
 250:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
		break;
 254:	08 95       	ret
		default:
		ret=E_NOK;
 256:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
 258:	08 95       	ret

0000025a <LCD_EN_pulse>:
 #include "softwareDelay.h"
 #include <stdlib.h>6

 void LCD_EN_pulse(void)
 {
	 DIO_Write(LCD_EN_PORT, LCD_EN_PIN, HIGH);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	68 e0       	ldi	r22, 0x08	; 8
 25e:	4f ef       	ldi	r20, 0xFF	; 255
 260:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
/***********************************************************/
	 SwDelay_ms(1);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
	 DIO_Write(LCD_EN_PORT, LCD_EN_PIN, LOW);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	68 e0       	ldi	r22, 0x08	; 8
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
/*************************************************************/	 
	 SwDelay_ms(1);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
 }
 286:	08 95       	ret

00000288 <LCD_config_pins>:

 void LCD_config_pins(void){

	 /* set LCD pins as outputs */
	DIO_init(&Dio_configurationA);
 288:	89 e6       	ldi	r24, 0x69	; 105
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	 gpioPinDirection(LCD_D6_PORT, LCD_D6_PIN, OUTPUT);

	 gpioPinDirection(LCD_D7_PORT, LCD_D7_PIN, OUTPUT); 
 */
	
}
 290:	08 95       	ret

00000292 <LCD_send_nibble>:

 void LCD_send_nibble(uint8_t data){
 292:	cf 93       	push	r28
	 uint8_t mask = 1;
	 data >>= 4;
 294:	c8 2f       	mov	r28, r24
 296:	c2 95       	swap	r28
 298:	cf 70       	andi	r28, 0x0F	; 15
	 if(data & mask)
 29a:	c0 ff       	sbrs	r28, 0
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <LCD_send_nibble+0x18>
	 DIO_Write(LCD_D4_PORT, LCD_D4_PIN, HIGH);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	60 e1       	ldi	r22, 0x10	; 16
 2a2:	4f ef       	ldi	r20, 0xFF	; 255
 2a4:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <LCD_send_nibble+0x22>
	 else
	 DIO_Write(LCD_D4_PORT, LCD_D4_PIN, LOW);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	60 e1       	ldi	r22, 0x10	; 16
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>

	 mask *= 2;
	 if(data & mask)
 2b4:	c1 ff       	sbrs	r28, 1
 2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <LCD_send_nibble+0x32>
	 DIO_Write(LCD_D5_PORT, LCD_D5_PIN, HIGH);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	60 e2       	ldi	r22, 0x20	; 32
 2bc:	4f ef       	ldi	r20, 0xFF	; 255
 2be:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <LCD_send_nibble+0x3c>
	 else
	 DIO_Write(LCD_D5_PORT, LCD_D5_PIN, LOW);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	60 e2       	ldi	r22, 0x20	; 32
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>

	 mask *= 2;
	 if(data & mask)
 2ce:	c2 ff       	sbrs	r28, 2
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <LCD_send_nibble+0x4c>
	 DIO_Write(LCD_D6_PORT, LCD_D6_PIN, HIGH);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	60 e4       	ldi	r22, 0x40	; 64
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <LCD_send_nibble+0x56>
	 else
	 DIO_Write(LCD_D6_PORT, LCD_D6_PIN, LOW);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	60 e4       	ldi	r22, 0x40	; 64
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>

	 mask *= 2;
	 if(data & mask)
 2e8:	c8 70       	andi	r28, 0x08	; 8
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <LCD_send_nibble+0x66>
	 DIO_Write(LCD_D7_PORT, LCD_D7_PIN, HIGH);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	60 e8       	ldi	r22, 0x80	; 128
 2f0:	4f ef       	ldi	r20, 0xFF	; 255
 2f2:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <LCD_send_nibble+0x70>
	 else
	 DIO_Write(LCD_D7_PORT, LCD_D7_PIN, LOW);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	60 e8       	ldi	r22, 0x80	; 128
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
 }
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <LCD_send_char>:
/***************************************************************************/
 void LCD_send_char(char data)		//Sends Char to LCD
 {
 306:	cf 93       	push	r28
 308:	c8 2f       	mov	r28, r24
	 DIO_Write(LCD_RS_PORT, LCD_RS_PIN, HIGH);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	4f ef       	ldi	r20, 0xFF	; 255
 310:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
	 LCD_send_nibble(data); // Higher nibble first
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 49 01 	call	0x292	; 0x292 <LCD_send_nibble>
	 LCD_EN_pulse();
 31a:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_EN_pulse>

	 LCD_send_nibble(data<<4);
 31e:	8c 2f       	mov	r24, r28
 320:	82 95       	swap	r24
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	0e 94 49 01 	call	0x292	; 0x292 <LCD_send_nibble>
	 LCD_EN_pulse();
 328:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_EN_pulse>
	 SwDelay_ms(1);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
 }
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <LCD_send_command>:
 /**************************************************************************/
 void LCD_send_command(uint8_t data)	//Sends Command to LCD
 {
 33c:	cf 93       	push	r28
 33e:	c8 2f       	mov	r28, r24
	 DIO_Write(LCD_RS_PORT, LCD_RS_PIN, LOW);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_Write>
	 LCD_send_nibble(data); // Higher nibble first
 34a:	8c 2f       	mov	r24, r28
 34c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_send_nibble>
	 LCD_EN_pulse();
 350:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_EN_pulse>

	 LCD_send_nibble(data<<4);
 354:	8c 2f       	mov	r24, r28
 356:	82 95       	swap	r24
 358:	80 7f       	andi	r24, 0xF0	; 240
 35a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_send_nibble>
	 LCD_EN_pulse();
 35e:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_EN_pulse>
	 SwDelay_ms(1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
 }
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <LCD_init>:
 /******************************************************************************/
 void LCD_init(void)//Initializes LCD
 {
	 LCD_config_pins();
 372:	0e 94 44 01 	call	0x288	; 0x288 <LCD_config_pins>
	 /*******************************************************************/
	 SwDelay_ms(20);
 376:	64 e1       	ldi	r22, 0x14	; 20
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
	 //
	 //	gpioPinWrite(LCD_RS_PORT, LCD_RS_PIN, LOW);
	 //	gpioPinWrite(LCD_RW_PORT, LCD_RW_PIN, LOW);
	 //	gpioPinWrite(LCD_EN_PORT, LCD_EN_PIN, LOW);

	 LCD_send_command(0x33);
 382:	83 e3       	ldi	r24, 0x33	; 51
 384:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
	 LCD_send_command(0x32);
 388:	82 e3       	ldi	r24, 0x32	; 50
 38a:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
	 LCD_send_command(Four_bit); // 4-bit
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
	 LCD_send_command(Cursor_on);
 394:	8e e0       	ldi	r24, 0x0E	; 14
 396:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
	 LCD_send_command(Lcd_clear);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
	 /*********************************************************************/
	 SwDelay_ms(10);
 3a0:	6a e0       	ldi	r22, 0x0A	; 10
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
	 LCD_send_command(Increment_cursor);
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
	 LCD_send_command(Cursor_off); // Cursor off
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
 }
 3b8:	08 95       	ret

000003ba <LCD_clear>:
 void LCD_clear(void)				//Clears LCD
 {
	 LCD_send_command(Lcd_clear);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>
 }
 3c0:	08 95       	ret

000003c2 <LCD_send_string>:

 void LCD_send_string(char* data)	//Outputs string to LCD
 {
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
	 while(*data){
 3c8:	88 81       	ld	r24, Y
 3ca:	88 23       	and	r24, r24
 3cc:	31 f0       	breq	.+12     	; 0x3da <LCD_send_string+0x18>
 void LCD_clear(void)				//Clears LCD
 {
	 LCD_send_command(Lcd_clear);
 }

 void LCD_send_string(char* data)	//Outputs string to LCD
 3ce:	21 96       	adiw	r28, 0x01	; 1
 {
	 while(*data){
		 LCD_send_char(*data++);
 3d0:	0e 94 83 01 	call	0x306	; 0x306 <LCD_send_char>
	 LCD_send_command(Lcd_clear);
 }

 void LCD_send_string(char* data)	//Outputs string to LCD
 {
	 while(*data){
 3d4:	89 91       	ld	r24, Y+
 3d6:	88 23       	and	r24, r24
 3d8:	d9 f7       	brne	.-10     	; 0x3d0 <LCD_send_string+0xe>
		 LCD_send_char(*data++);
	 }
 }
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <LCD_goto_xy>:

 void LCD_goto_xy(uint8_t x, uint8_t y)	//Cursor to X Y position
 {
	 uint8_t DDRAMAddr;
	 // remap lines into proper order
	 switch(y)
 3e0:	62 30       	cpi	r22, 0x02	; 2
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <LCD_goto_xy+0x10>
 3e4:	63 30       	cpi	r22, 0x03	; 3
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <LCD_goto_xy+0x14>
 3e8:	61 30       	cpi	r22, 0x01	; 1
 3ea:	29 f4       	brne	.+10     	; 0x3f6 <LCD_goto_xy+0x16>
	 {
		 case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		 case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 3ec:	80 5c       	subi	r24, 0xC0	; 192
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LCD_goto_xy+0x16>
		 case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 3f0:	8c 5e       	subi	r24, 0xEC	; 236
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <LCD_goto_xy+0x16>
		 case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 3f4:	8c 5a       	subi	r24, 0xAC	; 172
		 default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	 }
	 // set data address
	 LCD_send_command(1<<LCD_DDRAM | DDRAMAddr);
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_send_command>

 }
 3fc:	08 95       	ret

000003fe <reverse>:
	 char t = *x; *x = *y; *y = t;
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 {
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	 while (i < j)
 406:	40 17       	cp	r20, r16
 408:	51 07       	cpc	r21, r17
 40a:	62 07       	cpc	r22, r18
 40c:	73 07       	cpc	r23, r19
 40e:	c0 f4       	brcc	.+48     	; 0x440 <reverse+0x42>
 inline void swap(char *x, char *y) {
	 char t = *x; *x = *y; *y = t;
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 410:	d8 01       	movw	r26, r16
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	a8 0f       	add	r26, r24
 416:	b9 1f       	adc	r27, r25
 418:	fc 01       	movw	r30, r24
 41a:	e4 0f       	add	r30, r20
 41c:	f5 1f       	adc	r31, r21
 {
	 while (i < j)
	 swap(&buffer[i++], &buffer[j--]);
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	6f 4f       	sbci	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	01 50       	subi	r16, 0x01	; 1
 428:	10 40       	sbci	r17, 0x00	; 0
 42a:	20 40       	sbci	r18, 0x00	; 0
 42c:	30 40       	sbci	r19, 0x00	; 0

 /*---Modification----------------------------------------------------------------------------------------------*/

 // inline function to swap two numbers
 inline void swap(char *x, char *y) {
	 char t = *x; *x = *y; *y = t;
 42e:	c0 81       	ld	r28, Z
 430:	de 91       	ld	r29, -X
 432:	d1 93       	st	Z+, r29
 434:	cc 93       	st	X, r28
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 {
	 while (i < j)
 436:	40 17       	cp	r20, r16
 438:	51 07       	cpc	r21, r17
 43a:	62 07       	cpc	r22, r18
 43c:	73 07       	cpc	r23, r19
 43e:	78 f3       	brcs	.-34     	; 0x41e <reverse+0x20>
	 swap(&buffer[i++], &buffer[j--]);

	 return buffer;
 }
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <itoa_>:

 // Iterative function to implement itoa() function in C
 char* itoa_(uint32_t value, char* buffer, uint32_t base)
 {
 44a:	4f 92       	push	r4
 44c:	5f 92       	push	r5
 44e:	6f 92       	push	r6
 450:	7f 92       	push	r7
 452:	8f 92       	push	r8
 454:	9f 92       	push	r9
 456:	af 92       	push	r10
 458:	bf 92       	push	r11
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	6b 01       	movw	r12, r22
 46c:	7c 01       	movw	r14, r24
 46e:	2a 01       	movw	r4, r20
 470:	48 01       	movw	r8, r16
 472:	59 01       	movw	r10, r18
	 // invalid input
	 if (base < 2 || base > 32)
 474:	d9 01       	movw	r26, r18
 476:	c8 01       	movw	r24, r16
 478:	02 97       	sbiw	r24, 0x02	; 2
 47a:	a1 09       	sbc	r26, r1
 47c:	b1 09       	sbc	r27, r1
 47e:	8f 31       	cpi	r24, 0x1F	; 31
 480:	91 05       	cpc	r25, r1
 482:	a1 05       	cpc	r26, r1
 484:	b1 05       	cpc	r27, r1
 486:	08 f0       	brcs	.+2      	; 0x48a <itoa_+0x40>
 488:	49 c0       	rjmp	.+146    	; 0x51c <itoa_+0xd2>
	 return buffer;

	 // consider absolute value of number
	 int n = abs(value);
 48a:	96 01       	movw	r18, r12
 48c:	dd 20       	and	r13, r13
 48e:	1c f4       	brge	.+6      	; 0x496 <itoa_+0x4c>
 490:	30 95       	com	r19
 492:	21 95       	neg	r18
 494:	3f 4f       	sbci	r19, 0xFF	; 255

	 int i = 0;
	 while (n)
 496:	21 15       	cp	r18, r1
 498:	31 05       	cpc	r19, r1
 49a:	39 f1       	breq	.+78     	; 0x4ea <itoa_+0xa0>
 49c:	e2 01       	movw	r28, r4
 49e:	01 e0       	ldi	r16, 0x01	; 1
 4a0:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 int r = n % base;
 4a2:	69 01       	movw	r12, r18
 4a4:	ee 24       	eor	r14, r14
 4a6:	d7 fc       	sbrc	r13, 7
 4a8:	e0 94       	com	r14
 4aa:	fe 2c       	mov	r15, r14
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	a5 01       	movw	r20, r10
 4b2:	94 01       	movw	r18, r8
 4b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodsi4>

		 if (r >= 10)
 4b8:	6a 30       	cpi	r22, 0x0A	; 10
 4ba:	71 05       	cpc	r23, r1
 4bc:	24 f0       	brlt	.+8      	; 0x4c6 <itoa_+0x7c>
		 buffer[i++] = 65 + (r - 10);
 4be:	69 5c       	subi	r22, 0xC9	; 201
 4c0:	68 83       	st	Y, r22
 4c2:	38 01       	movw	r6, r16
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <itoa_+0x82>
		 else
		 buffer[i++] = 48 + r;
 4c6:	60 5d       	subi	r22, 0xD0	; 208
 4c8:	68 83       	st	Y, r22
 4ca:	38 01       	movw	r6, r16

		 n = n / base;
 4cc:	c7 01       	movw	r24, r14
 4ce:	b6 01       	movw	r22, r12
 4d0:	a5 01       	movw	r20, r10
 4d2:	94 01       	movw	r18, r8
 4d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodsi4>
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
 4dc:	21 96       	adiw	r28, 0x01	; 1

	 // consider absolute value of number
	 int n = abs(value);

	 int i = 0;
	 while (n)
 4de:	21 15       	cp	r18, r1
 4e0:	31 05       	cpc	r19, r1
 4e2:	f9 f6       	brne	.-66     	; 0x4a2 <itoa_+0x58>

		 n = n / base;
	 }

	 // if number is 0
	 if (i == 0)
 4e4:	61 14       	cp	r6, r1
 4e6:	71 04       	cpc	r7, r1
 4e8:	31 f4       	brne	.+12     	; 0x4f6 <itoa_+0xac>
	 buffer[i++] = '0';
 4ea:	80 e3       	ldi	r24, 0x30	; 48
 4ec:	f2 01       	movw	r30, r4
 4ee:	80 83       	st	Z, r24
 4f0:	66 24       	eor	r6, r6
 4f2:	77 24       	eor	r7, r7
 4f4:	63 94       	inc	r6
	 // is preceded with a minus sign (-)
	 // With any other base, value is always considered unsigned
	 if (value < 0 && base == 10)
	 buffer[i++] = '-';

	 buffer[i] = '\0'; // null terminate string
 4f6:	f2 01       	movw	r30, r4
 4f8:	e6 0d       	add	r30, r6
 4fa:	f7 1d       	adc	r31, r7
 4fc:	10 82       	st	Z, r1

	 // reverse the string and return it
	 return reverse(buffer, 0, i - 1);
 4fe:	08 94       	sec
 500:	61 08       	sbc	r6, r1
 502:	71 08       	sbc	r7, r1
 504:	83 01       	movw	r16, r6
 506:	22 27       	eor	r18, r18
 508:	17 fd       	sbrc	r17, 7
 50a:	20 95       	com	r18
 50c:	32 2f       	mov	r19, r18
 50e:	c2 01       	movw	r24, r4
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	ba 01       	movw	r22, r20
 516:	0e 94 ff 01 	call	0x3fe	; 0x3fe <reverse>
 51a:	2c 01       	movw	r4, r24
 }
 51c:	84 2d       	mov	r24, r4
 51e:	95 2d       	mov	r25, r5
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	bf 90       	pop	r11
 532:	af 90       	pop	r10
 534:	9f 90       	pop	r9
 536:	8f 90       	pop	r8
 538:	7f 90       	pop	r7
 53a:	6f 90       	pop	r6
 53c:	5f 90       	pop	r5
 53e:	4f 90       	pop	r4
 540:	08 95       	ret

00000542 <main>:
#include "LCD.h"


int main(void)
{
     LCD_init();
 542:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_init>

     while (1) {
	     LCD_clear();
 546:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_clear>

	     LCD_goto_xy(0,0);
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goto_xy>
	     LCD_send_char('M');
 552:	8d e4       	ldi	r24, 0x4D	; 77
 554:	0e 94 83 01 	call	0x306	; 0x306 <LCD_send_char>

	     SwDelay_ms(50);
 558:	82 e3       	ldi	r24, 0x32	; 50
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 b1 02 	call	0x562	; 0x562 <SwDelay_ms>
 560:	f2 cf       	rjmp	.-28     	; 0x546 <main+0x4>

00000562 <SwDelay_ms>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
 562:	dc 01       	movw	r26, r24
 564:	cb 01       	movw	r24, r22
	uint8_t counter_256;
	uint8_t counter_21;
	while (n)
 566:	00 97       	sbiw	r24, 0x00	; 0
 568:	a1 05       	cpc	r26, r1
 56a:	b1 05       	cpc	r27, r1
 56c:	61 f4       	brne	.+24     	; 0x586 <SwDelay_ms+0x24>
 56e:	08 95       	ret
 570:	21 50       	subi	r18, 0x01	; 1
		counter_21 = 21;
		while (counter_21)
		{
			/* every 256 branch costs 48 micro seconds */
			counter_256 = 255;
			while (counter_256)
 572:	f1 f7       	brne	.-4      	; 0x570 <SwDelay_ms+0xe>
 574:	31 50       	subi	r19, 0x01	; 1
	uint8_t counter_21;
	while (n)
	{
		/* every 21 repetition of the 256 branches costs almost 1 milli second as: 48 micro x 21 = 1.008 milli second*/
		counter_21 = 21;
		while (counter_21)
 576:	11 f0       	breq	.+4      	; 0x57c <SwDelay_ms+0x1a>
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
 578:	24 2f       	mov	r18, r20
 57a:	fa cf       	rjmp	.-12     	; 0x570 <SwDelay_ms+0xe>
			{
				counter_256--;
			}
			counter_21--;
		}
		n--;
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	a1 09       	sbc	r26, r1
 580:	b1 09       	sbc	r27, r1
 */
void SwDelay_ms(uint32_t n)
{
	uint8_t counter_256;
	uint8_t counter_21;
	while (n)
 582:	19 f4       	brne	.+6      	; 0x58a <SwDelay_ms+0x28>
 584:	08 95       	ret
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
 586:	55 e1       	ldi	r21, 0x15	; 21
 588:	4f ef       	ldi	r20, 0xFF	; 255
 58a:	35 2f       	mov	r19, r21
 58c:	f5 cf       	rjmp	.-22     	; 0x578 <SwDelay_ms+0x16>

0000058e <SwDelay_us>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32_t n)
{
 58e:	dc 01       	movw	r26, r24
 590:	cb 01       	movw	r24, r22
	while (n)
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	a1 05       	cpc	r26, r1
 596:	b1 05       	cpc	r27, r1
 598:	21 f0       	breq	.+8      	; 0x5a2 <SwDelay_us+0x14>
	{
		n--;
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	a1 09       	sbc	r26, r1
 59e:	b1 09       	sbc	r27, r1
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32_t n)
{
	while (n)
 5a0:	e1 f7       	brne	.-8      	; 0x59a <SwDelay_us+0xc>
 5a2:	08 95       	ret

000005a4 <__udivmodsi4>:
 5a4:	a1 e2       	ldi	r26, 0x21	; 33
 5a6:	1a 2e       	mov	r1, r26
 5a8:	aa 1b       	sub	r26, r26
 5aa:	bb 1b       	sub	r27, r27
 5ac:	fd 01       	movw	r30, r26
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <__udivmodsi4_ep>

000005b0 <__udivmodsi4_loop>:
 5b0:	aa 1f       	adc	r26, r26
 5b2:	bb 1f       	adc	r27, r27
 5b4:	ee 1f       	adc	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	a2 17       	cp	r26, r18
 5ba:	b3 07       	cpc	r27, r19
 5bc:	e4 07       	cpc	r30, r20
 5be:	f5 07       	cpc	r31, r21
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__udivmodsi4_ep>
 5c2:	a2 1b       	sub	r26, r18
 5c4:	b3 0b       	sbc	r27, r19
 5c6:	e4 0b       	sbc	r30, r20
 5c8:	f5 0b       	sbc	r31, r21

000005ca <__udivmodsi4_ep>:
 5ca:	66 1f       	adc	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	1a 94       	dec	r1
 5d4:	69 f7       	brne	.-38     	; 0x5b0 <__udivmodsi4_loop>
 5d6:	60 95       	com	r22
 5d8:	70 95       	com	r23
 5da:	80 95       	com	r24
 5dc:	90 95       	com	r25
 5de:	9b 01       	movw	r18, r22
 5e0:	ac 01       	movw	r20, r24
 5e2:	bd 01       	movw	r22, r26
 5e4:	cf 01       	movw	r24, r30
 5e6:	08 95       	ret

000005e8 <_exit>:
 5e8:	f8 94       	cli

000005ea <__stop_program>:
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stop_program>
